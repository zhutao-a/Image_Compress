/* Compress and Decompress image data
*/
#define _CRT_SECURE_NO_WARNINGS
#include <cstring>
#include <iostream>
#include <fstream>
#include <math.h>

#include "rgbTileProc.h"
#include "encoder.h"
#include "defines.h"

typedef struct _TileCompressionInfo {
    int tilePosition;
    int tileSize;
} TileCompressionInfo;

int main() {


    const int TILE_WIDTH = 8;
    const int TILE_HEIGHT = 8;

    const int BYTES_PER_PIXEL = 4;
    unsigned char pARGB[TILE_WIDTH * TILE_HEIGHT * BYTES_PER_PIXEL] = {\
        0x28,0x33,0x6c,0xd5,0x28,0x33,0x6c,0xd5,0x27,0x33,0x6d,0xd5,0x27,0x33,0x6d,0xd5,0x26,0x32,0x6c,0xd6,0x24,0x32,0x6d,0xd6,0x24,0x32,0x6d,0xd6,0x24,0x32,0x6d,0xd6,\
        0x26,0x33,0x6b,0xd6,0x26,0x33,0x6b,0xd6,0x26,0x32,0x6c,0xd6,0x26,0x32,0x6c,0xd6,0x24,0x32,0x6c,0xd7,0x24,0x32,0x6d,0xd6,0x24,0x32,0x6d,0xd6,0x24,0x32,0x6d,0xd6,\
        0x26,0x32,0x6c,0xd6,0x27,0x33,0x6d,0xd5,0x25,0x33,0x6d,0xd6,0x25,0x33,0x6d,0xd6,0x25,0x33,0x6d,0xd6,0x26,0x34,0x6f,0xd5,0x26,0x34,0x6f,0xd5,0x26,0x34,0x6f,0xd5,\
        0x26,0x34,0x6e,0xd5,0x26,0x34,0x6e,0xd5,0x27,0x35,0x70,0xd4,0x27,0x35,0x70,0xd4,0x27,0x35,0x70,0xd4,0x27,0x35,0x70,0xd4,0x27,0x35,0x70,0xd4,0x25,0x35,0x70,0xd5,\
        0x26,0x36,0x71,0xd4,0x26,0x36,0x71,0xd4,0x26,0x36,0x71,0xd4,0x26,0x36,0x71,0xd4,0x25,0x35,0x70,0xd5,0x25,0x35,0x70,0xd5,0x25,0x35,0x70,0xd5,0x25,0x35,0x70,0xd5,\
        0x24,0x36,0x73,0xd4,0x24,0x36,0x73,0xd4,0x24,0x36,0x71,0xd5,0x24,0x36,0x71,0xd5,0x26,0x36,0x71,0xd4,0x25,0x35,0x70,0xd5,0x25,0x35,0x70,0xd5,0x25,0x35,0x70,0xd5,\
        0x25,0x38,0x75,0xd3,0x24,0x37,0x74,0xd4,0x25,0x37,0x74,0xd4,0x25,0x37,0x74,0xd4,0x25,0x37,0x72,0xd4,0x27,0x37,0x72,0xd3,0x27,0x37,0x72,0xd3,0x27,0x37,0x72,0xd3,\
        0x26,0x39,0x76,0xd2,0x26,0x39,0x76,0xd2,0x26,0x39,0x76,0xd2,0x28,0x3a,0x77,0xd1,0x28,0x3a,0x75,0xd2,0x2a,0x3a,0x75,0xd1,0x2a,0x3a,0x75,0xd1,0x2a,0x3b,0x74,0xd1};
    tileSetSize(TILE_WIDTH, TILE_HEIGHT);
    unsigned char* pCompressionBuffer = new unsigned char[TILE_WIDTH * TILE_HEIGHT * BYTES_PER_PIXEL];

     //for(int i=0;i<8;i++){
     //    for(int j=0;j<8;j++){
     //        printf("%02x",pARGB[i*8*4+j*4+0]);
     //        printf("%02x",pARGB[i*8*4+j*4+1]);
     //        printf("%02x",pARGB[i*8*4+j*4+2]);
     //        printf("%02x",pARGB[i*8*4+j*4+3]);
     //        printf("\t");
     //    }
     //    printf("\r\n");
     //}
    int tile_bytecount;
    argb2tile(pARGB, pCompressionBuffer, &tile_bytecount);

    printf("tile_bytecount=%02x\r\n", tile_bytecount);

    for (int i = 0;i < tile_bytecount;i++) {
        printf("data%d =%02x\r\n",i, *(pCompressionBuffer+i));
    }

    delete [] pCompressionBuffer;
    return 0;
}
