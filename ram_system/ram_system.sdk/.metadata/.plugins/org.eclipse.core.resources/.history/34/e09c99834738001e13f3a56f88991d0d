//-------------------------------------------------头文件----------------------------------------------------------------------------
#include "xaxidma.h"
#include "xparameters.h"
#include "xil_exception.h"
#include "xdebug.h"
#include "xscugic.h"

#include "ff.h"
#include "stdio.h"
#include "sleep.h"
//-------------------------------------------------宏定义----------------------------------------------------------------------------

#define NAME_LEN_MAX 		50
#define FILE_NUM_MAX 		100
#define DMA_DEV_ID			XPAR_AXIDMA_0_DEVICE_ID
//BD和数据区,从左往右第1位256M,第2位16M,第3位1M,第4位64K,第5位1K
#define TX_BD_SPACE_BASE	0x02000000
#define TX_BD_SPACE_HIGH	0x02FFFFFF
#define RX_BD_SPACE_BASE	0x03000000
#define RX_BD_SPACE_HIGH	0x03FFFFFF
#define TX_BUFFER_BASE		0x10000000
#define RX_BUFFER_BASE		0x14000000
//中断
#define TX_INTR_ID          XPAR_FABRIC_AXIDMA_0_MM2S_INTROUT_VEC_ID
#define RX_INTR_ID          XPAR_FABRIC_AXIDMA_0_S2MM_INTROUT_VEC_ID
#define INTC_DEVICE_ID      XPAR_SCUGIC_SINGLE_DEVICE_ID
#define INTC				XScuGic
#define INTC_HANDLER		XScuGic_InterruptHandler
#define DELAY_TIMER_COUNT	100
//APB
//control_reg[0]判断是编码还是解码,1b
//control_reg[1]判断编码后比特流长度是否写入成功,1b
//control_reg[13:2]为编码后比特流长度,12b
//control_reg[22:14]为tile_height,9b
//control_reg[31:23]为tile_width,9b
#define APB_BASE_ADDR		XPAR_APB_REG_0_BASEADDR

//-------------------------------------------------全局变量----------------------------------------------------------------------------

const  char ROOT_PATH[] = "0:/samples";//SD卡输入文件根目录
const  int  NRCHANNELS = 4;
const  int  TILE_WIDTH = 8;
const  int  TILE_HEIGHT = 8;
const  int  COALESCING_COUNT = 1;

XAxiDma 		AxiDma;
XAxiDma_BdRing 	*TxRingPtr = XAxiDma_GetTxRing(&AxiDma);
XAxiDma_BdRing 	*RxRingPtr = XAxiDma_GetRxRing(&AxiDma);
XAxiDma_Bd 		*TxBdPtr;
XAxiDma_Bd 		*RxBdPtr;
static INTC Intc;
int	WIDTH;
int	HEIGHT;
volatile int TxDone = 0;
volatile int RxDone = 0;

//-------------------------------------------------函数声明----------------------------------------------------------------------------

static void TxIntrHandler();
static int 	SetupTxIntrSystem();
static void DisableTxIntrSystem();
static int  TxSetup();
static int  BdPerSendTile(int Buffer_Offset_Addr);
static int  SendTile(int Buffer_Offset_Addr);

static void RxIntrHandler();
static int 	SetupRxIntrSystem();
static void DisableRxIntrSystem();
static int  RxSetup();
static int 	BdPerReceiveTile(int Buffer_Offset_Addr,int byte_count);
static int  ReceiveTile(int Buffer_Offset_Addr,int byte_count);


static int  ScanFile(char File_Name[][NAME_LEN_MAX]);
static int  StbiLoad(char const* InFileName, int* Width, int* Height, char* DATA_BASE_ADDR);

//-------------------------------------------------main函数----------------------------------------------------------------------------
int main(void)
{
	//挂载SD卡
	FATFS fatfs;
	char sd_Path[] = "0:/";
	f_mount(&fatfs, sd_Path, 1);
	Xil_DCacheDisable();//数据缓冲不使能

	//扫描文件
	int FileCnt;
	char File_Name[FILE_NUM_MAX][NAME_LEN_MAX];
	FileCnt=ScanFile(File_Name);
	xil_printf("\r\n file count is %d\r\n",FileCnt);

	//读取像素存入DDR
	StbiLoad(File_Name[0],&WIDTH,&HEIGHT, (char*)TX_BUFFER_BASE);//File_Name[0]->sample04,File_Name[23]->sample27
	xil_printf("WIDTH = %d, HEIGHT = %d\r\n",WIDTH,HEIGHT);

    int numRows = HEIGHT / TILE_HEIGHT;
    int numColumns = WIDTH / TILE_WIDTH;
    int TileCompleteState = 0;
    int TotalByteCount = 0;
    UINTPTR  TX_OFFEST_ADDR = 0;
    UINTPTR  RX_OFFEST_ADDR = 0;

	//APB配置
	u32 wdata;
	wdata=(TILE_WIDTH<<23)+(TILE_HEIGHT<<14)+(0<<2)+(0<<1)+(1<<0);
	Xil_Out32(APB_BASE_ADDR,wdata);

	//AXI DMA配置
	XAxiDma_Config *Config;
	Config = XAxiDma_LookupConfig(DMA_DEV_ID);
	XAxiDma_CfgInitialize(&AxiDma, Config);

	//Tx配置
	TxSetup();
	SetupTxIntrSystem();
//	XAxiDma_BdRingAlloc(TxRingPtr, TILE_HEIGHT, &TxBdPtr);
	//Rx配置
	RxSetup();
	SetupRxIntrSystem();
//	XAxiDma_BdRingAlloc(RxRingPtr, 1, &RxBdPtr);


    u32 rdata;
    u32 bytecount,wordcount;
    int tileRowIndex = 0;
    int tileColumnIndex = 0;
    //直到所有Tile完成编码
    for (tileRowIndex = 0; tileRowIndex < numRows; tileRowIndex++) {
    	xil_printf("tileRowIndex = %d\r\n",tileRowIndex);
        for (tileColumnIndex = 0; tileColumnIndex < numColumns; tileColumnIndex++) {
        	//发送一个Tile数据
        	if(tileRowIndex==14){
        		xil_printf("tileColumnIndex = %d\r\n",tileColumnIndex);
        		if(tileColumnIndex==80){
        			xil_printf("start debug\r\n");
        		}
        	}
        	SendTile(TX_OFFEST_ADDR);
        	rdata=Xil_In32(APB_BASE_ADDR);
        	TileCompleteState=((rdata&0x00000002)>>1);
        	while(TileCompleteState==0){//等待编码完成
            	rdata=Xil_In32(APB_BASE_ADDR);
            	TileCompleteState=((rdata&0x00000002)>>1);
        	}
        	bytecount=((rdata&0x00003ffc)>>2);
        	if(bytecount&0x00000003){
        		wordcount=(bytecount>>2)+1;
        	}
        	else{
        		wordcount=(bytecount>>2);
        	}
        	TotalByteCount=TotalByteCount+bytecount;
			wdata=(TILE_WIDTH<<23)+(TILE_HEIGHT<<14)+(0<<2)+(0<<1)+(1<<0);
			Xil_Out32(APB_BASE_ADDR,wdata);
        	//接收一个Tile数据
			ReceiveTile(RX_OFFEST_ADDR,wordcount*4);
			//等待接收完成
			while(TxDone==0||RxDone==0){}
			TxDone=0;
			RxDone=0;
			//改变下一个Tile的偏移地址
			RX_OFFEST_ADDR=RX_OFFEST_ADDR+bytecount;
			TX_OFFEST_ADDR=tileRowIndex*TILE_HEIGHT*WIDTH*NRCHANNELS+tileColumnIndex*TILE_WIDTH*NRCHANNELS;
//			RX_OFFEST_ADDR=0;
//			TX_OFFEST_ADDR=0;
        }
    }
    xil_printf("TotalByteCount = %d\r\n",TotalByteCount);
	DisableTxIntrSystem();
	DisableRxIntrSystem();

	return 0;
}

//-------------------------------------------------函数定义----------------------------------------------------------------------------

//Tx中断服务函数
static void TxIntrHandler()
{
    u32 IrqStatus;
    IrqStatus = XAxiDma_IntrGetIrq(&AxiDma, XAXIDMA_DMA_TO_DEVICE);
    XAxiDma_IntrAckIrq(&AxiDma, IrqStatus, XAXIDMA_DMA_TO_DEVICE);
    if (IrqStatus & XAXIDMA_IRQ_IOC_MASK){
    	TxDone=1;
    }
}

//设置Tx中断处理系统
static int SetupTxIntrSystem()
{
	XScuGic_Config *IntcConfig;

	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);									//查看设备
	XScuGic_CfgInitialize(&Intc, IntcConfig, IntcConfig->CpuBaseAddress);				//初始化
	XScuGic_SetPriorityTriggerType(&Intc, TX_INTR_ID, 0xA0, 0x1);						//设置电平触发
	XScuGic_Connect(&Intc, TX_INTR_ID, (Xil_InterruptHandler)TxIntrHandler, TxRingPtr);	//关联中断服务函数
	XScuGic_Enable(&Intc, TX_INTR_ID);													//中断使能

	//使能来自硬件的例外中断
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)INTC_HANDLER, (void *)&Intc);
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

//关闭Tx中断处理系统
static void DisableTxIntrSystem()
{
	XScuGic_Disconnect(&Intc, TX_INTR_ID);
}

//Tx准备
static int TxSetup()
{
	XAxiDma_BdRingIntDisable(TxRingPtr, XAXIDMA_IRQ_ALL_MASK);//清除发送所有的中断
	XAxiDma_BdRingCreate(TxRingPtr, TX_BD_SPACE_BASE, TX_BD_SPACE_BASE, XAXIDMA_BD_MINIMUM_ALIGNMENT, TILE_HEIGHT);//产生BD ring
	//初始化TxRingPtr
	XAxiDma_Bd BdTemplate;
	XAxiDma_BdClear(&BdTemplate);
	XAxiDma_BdRingClone(TxRingPtr, &BdTemplate);

	XAxiDma_BdRingSetCoalesce(TxRingPtr, COALESCING_COUNT, DELAY_TIMER_COUNT);//设置多少个Tile产生一次中断
	XAxiDma_BdRingIntEnable(TxRingPtr, XAXIDMA_IRQ_ALL_MASK);//使能所有中断

	return XST_SUCCESS;
}

static int BdPerSendTile(int Buffer_Offset_Addr)
{
	XAxiDma_Bd *BdCurPtr;
	UINTPTR BufferAddr;
	int i;
	BufferAddr = TX_BUFFER_BASE + Buffer_Offset_Addr;
	BdCurPtr = TxBdPtr;
	for( i=0; i< TILE_HEIGHT;i++) {
		u32 CrBits = 0;
		XAxiDma_BdSetBufAddr(BdCurPtr, BufferAddr);
		XAxiDma_BdSetLength(BdCurPtr, TILE_WIDTH*NRCHANNELS, TxRingPtr->MaxTransferLen);
		if (i == 0) {
			CrBits |= XAXIDMA_BD_CTRL_TXSOF_MASK;//The first BD has SOF set
		}
		if(i == (TILE_HEIGHT - 1)) {
			CrBits |= XAXIDMA_BD_CTRL_TXEOF_MASK;//The last BD should have EOF and IOC set
		}
		XAxiDma_BdSetCtrl(BdCurPtr, CrBits);
		XAxiDma_BdSetId(BdCurPtr, BufferAddr);
		BufferAddr = BufferAddr+WIDTH*NRCHANNELS;
		BdCurPtr = (XAxiDma_Bd *)XAxiDma_BdRingNext(TxRingPtr, BdCurPtr);
	}
	return XST_SUCCESS;
}

static int SendTile(int Buffer_Offset_Addr)
{
	XAxiDma_BdRingCreate(TxRingPtr, TX_BD_SPACE_BASE, TX_BD_SPACE_BASE, XAXIDMA_BD_MINIMUM_ALIGNMENT, TILE_HEIGHT);//产生BD ring
	XAxiDma_BdRingAlloc(TxRingPtr, TILE_HEIGHT, &TxBdPtr);

//	TxRingPtr->HwTail=(XAxiDma_Bd *)TX_BD_SPACE_BASE;
//	TxRingPtr->PreCnt=TILE_HEIGHT;
//	TxRingPtr->HwCnt=0;

	BdPerSendTile(Buffer_Offset_Addr);
	XAxiDma_BdRingToHw(TxRingPtr, TILE_HEIGHT, TxBdPtr);//Give the BD to hardware
    XAxiDma_BdRingStart(TxRingPtr);
	return XST_SUCCESS;
}


//Rx中断服务函数
static void RxIntrHandler()
{
    u32 IrqStatus;
    IrqStatus = XAxiDma_IntrGetIrq(&AxiDma, XAXIDMA_DEVICE_TO_DMA);
    XAxiDma_IntrAckIrq(&AxiDma, IrqStatus, XAXIDMA_DEVICE_TO_DMA);
    if (IrqStatus & XAXIDMA_IRQ_IOC_MASK){
    	RxDone=1;
    }
}

//设置Rx中断处理系统
static int SetupRxIntrSystem()
{
	XScuGic_Config *IntcConfig;

	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);									//查看设备
	XScuGic_CfgInitialize(&Intc, IntcConfig, IntcConfig->CpuBaseAddress);				//初始化
	XScuGic_SetPriorityTriggerType(&Intc, RX_INTR_ID, 0xA0, 0x1);						//设置电平触发
	XScuGic_Connect(&Intc, RX_INTR_ID, (Xil_InterruptHandler)RxIntrHandler, RxRingPtr);	//关联中断服务函数
	XScuGic_Enable(&Intc, RX_INTR_ID);													//中断使能

	//使能来自硬件的例外中断
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)INTC_HANDLER, (void *)&Intc);
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

//关闭Rx中断处理系统
static void DisableRxIntrSystem()
{
	XScuGic_Disconnect(&Intc, RX_INTR_ID);
}

//Rx准备
static int RxSetup()
{
	XAxiDma_BdRingIntDisable(RxRingPtr, XAXIDMA_IRQ_ALL_MASK);//清除发送所有的中断
	XAxiDma_BdRingCreate(RxRingPtr, RX_BD_SPACE_BASE, RX_BD_SPACE_BASE, XAXIDMA_BD_MINIMUM_ALIGNMENT, 1);//产生BD ring
	//初始化RxRingPtr
	XAxiDma_Bd BdTemplate;
	XAxiDma_BdClear(&BdTemplate);
	XAxiDma_BdRingClone(RxRingPtr, &BdTemplate);

	XAxiDma_BdRingSetCoalesce(RxRingPtr, COALESCING_COUNT, DELAY_TIMER_COUNT);//设置多少个Tile产生一次中断
	XAxiDma_BdRingIntEnable(RxRingPtr, XAXIDMA_IRQ_ALL_MASK);//使能所有中断

	return XST_SUCCESS;
}

static int BdPerReceiveTile(int Buffer_Offset_Addr,int byte_count)
{
	XAxiDma_Bd *BdCurPtr;
	UINTPTR BufferAddr;
	BufferAddr = RX_BUFFER_BASE + Buffer_Offset_Addr;
	BdCurPtr = RxBdPtr;

	XAxiDma_BdSetBufAddr(BdCurPtr, BufferAddr);
	XAxiDma_BdSetLength(BdCurPtr, byte_count, RxRingPtr->MaxTransferLen);
	XAxiDma_BdSetCtrl(BdCurPtr, 0);
	XAxiDma_BdSetId(BdCurPtr, BufferAddr);

	return XST_SUCCESS;
}

static int ReceiveTile(int Buffer_Offset_Addr,int byte_count)
{
	XAxiDma_BdRingCreate(RxRingPtr, RX_BD_SPACE_BASE, RX_BD_SPACE_BASE, XAXIDMA_BD_MINIMUM_ALIGNMENT, 1);//产生BD ring
	XAxiDma_BdRingAlloc(RxRingPtr, 1, &RxBdPtr);

//	RxRingPtr->HwTail=(XAxiDma_Bd *)RX_BD_SPACE_BASE;
//	RxRingPtr->PreCnt=1;
//	RxRingPtr->HwCnt=0;

	BdPerReceiveTile(Buffer_Offset_Addr,byte_count);
	XAxiDma_BdRingToHw(RxRingPtr, 1, RxBdPtr);//Give the BD to hardware
    XAxiDma_BdRingStart(RxRingPtr);
	return XST_SUCCESS;
}


//获取根目录文件夹内所有文件名称
static int ScanFile(char File_Name[][NAME_LEN_MAX])
{
    FRESULT res;
    FILINFO finfo;
    DIR dir;
    TCHAR *fn;
    int FileCnt=0;
    char name[NAME_LEN_MAX];
	res = f_opendir(&dir,ROOT_PATH);
	if(res == FR_OK){
		while (f_readdir(&dir, &finfo) == FR_OK){
			fn = finfo.fname;
			strcpy(name, ROOT_PATH);
			strcat(name, "/");
			strcat(name, fn);
			strcpy(File_Name[FileCnt],name);
			if(!fn[0])break;
			FileCnt++; //图片总数（全局变量）
		}
	}
	f_closedir(&dir);
	return FileCnt;
}

//读取InFileName的像素数据存入DDR中地址buf_addr
static int StbiLoad(char const* InFileName, int* Width, int* Height, char* DATA_BASE_ADDR)
{
    FIL pfile;
    UINT br;
    FRESULT status;
    printf("InFileName: %s\n", InFileName);
    status=f_open(&pfile,InFileName,FA_READ);
    char useless_segment1[18];
    char useless_segment2[96];
    int W,H;
    if (status != FR_OK){
        printf("open fail\n");
        return 1;
    }
    else{
    	f_read(&pfile,useless_segment1,sizeof(useless_segment1),&br);
    	f_read(&pfile,&W,4,&br);
    	f_read(&pfile,&H,4,&br);
    	f_read(&pfile,useless_segment2,sizeof(useless_segment2),&br);
    	*Width=W;
    	*Height=H;
    	for(int i=0;i<H;i++){
    		f_read(&pfile,DATA_BASE_ADDR+(H-1-i) * W * NRCHANNELS*sizeof(char),W * NRCHANNELS*sizeof(char),&br);
    	}
    	return 0;
    }
}







